[gd_scene load_steps=11 format=2]

[ext_resource path="res://assets/backgorund.png" type="Texture" id=1]
[ext_resource path="res://nodos/PlayerLight.tscn" type="PackedScene" id=2]
[ext_resource path="res://assets/tile.png" type="Texture" id=3]
[ext_resource path="res://assets/enemy.png" type="Texture" id=4]
[ext_resource path="res://enemy.gd" type="Script" id=5]

[sub_resource type="OccluderPolygon2D" id=1]
polygon = PoolVector2Array( 0, 0, 32, 0, 32, 32, 0, 32 )

[sub_resource type="ConvexPolygonShape2D" id=2]
points = PoolVector2Array( 0, 0, 32, 0, 32, 32, 0, 32 )

[sub_resource type="TileSet" id=3]
0/name = "tile.png 0"
0/texture = ExtResource( 3 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 32, 32 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/occluder = SubResource( 1 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape = SubResource( 2 )
0/shape_one_way = false
0/shape_one_way_margin = 1.0
0/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 2 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
0/z_index = 0

[sub_resource type="GDScript" id=5]
script/source = "extends TileMap



## Variables to be set when the node is ready


# Reference to a new AStar navigation grid node
onready var astar = AStar.new()

# Used to find the centre of a tile
onready var half_cell_size = cell_size / 2

# All tiles that can be used for pathfinding
onready var traversable_tiles = get_used_cells()

# The bounds of the rectangle containing all used tiles on this tilemap
onready var used_rect = get_used_rect()


func _ready():

	# This would hide the navigation_map upon loading, but we'll keep
	# it commented for this demo - uncomment for your game, most likely
	# visible = false

	# Add all tiles to the navigation grid
	_add_traversable_tiles(traversable_tiles)

	# Connects all added tiles
	_connect_traversable_tiles(traversable_tiles)


## Private functions


# Adds tiles to the A* grid but does not connect them
# ie. They will exist on the grid, but you cannot find a path yet
func _add_traversable_tiles(traversable_tiles):

	# Loop over all tiles
	for tile in traversable_tiles:

		# Determine the ID of the tile
		var id = _get_id_for_point(tile)

		# Add the tile to the AStar navigation
		# NOTE: We use Vector3 as AStar is, internally, 3D. We just don't use Z.
		astar.add_point(id, Vector3(tile.x, tile.y, 0))


# Connects all tiles on the A* grid with their surrounding tiles
func _connect_traversable_tiles(traversable_tiles):

	# Loop over all tiles
	for tile in traversable_tiles:

		# Determine the ID of the tile
		var id = _get_id_for_point(tile)

		# Loops used to search around player (range(3) returns 0, 1, and 2)
		for x in range(3):
			for y in range(3):

				# Determines target, converting range variable to -1, 0, and 1
				var target = tile + Vector2(x - 1, y - 1)

				# Determines target ID
				var target_id = _get_id_for_point(target)

				# Do not connect if point is same or point does not exist on astar
				if tile == target or not astar.has_point(target_id):
					continue

				# Connect points
				astar.connect_points(id, target_id, true)


# Determines a unique ID for a given point on the map
func _get_id_for_point(point):

	# Offset position of tile with the bounds of the tilemap
	# This prevents ID's of less than 0, if points are behind (0, 0)
	var x = point.x - used_rect.position.x
	var y = point.y - used_rect.position.y

	# Returns the unique ID for the point on the map
	return x + y * used_rect.size.x


## Public functions

# Returns a path from start to end
# These are real positions, not cell coordinates
func custom_get_path(start, end):

	# Convert positions to cell coordinates
	var start_tile = world_to_map(start)
	var end_tile = world_to_map(end)

	# Determines IDs
	var start_id = _get_id_for_point(start_tile)
	var end_id = _get_id_for_point(end_tile)

	# Return null if navigation is impossible
	if not astar.has_point(start_id) or not astar.has_point(end_id):
		return null

	# Otherwise, find the map
	var path_map = astar.get_point_path(start_id, end_id)

	# Convert Vector3 array (remember, AStar is 3D) to real world points
	var path_world = []
	for point in path_map:
		var point_world = map_to_world(Vector2(point.x, point.y)) + half_cell_size
		path_world.append(point_world)
	return path_world
"

[sub_resource type="CanvasItemMaterial" id=4]
light_mode = 2

[node name="lightingtest" type="Node2D"]

[node name="backgorund" type="Sprite" parent="."]
position = Vector2( 335.046, 271.248 )
scale = Vector2( 1.33153, 1.36671 )
texture = ExtResource( 1 )

[node name="PlayerLight" parent="." instance=ExtResource( 2 )]
position = Vector2( 267.994, 212.218 )

[node name="TileMap" type="TileMap" parent="."]
tile_set = SubResource( 3 )
cell_size = Vector2( 32, 32 )
format = 1
tile_data = PoolIntArray( 0, 0, 0, 196620, 0, 0, 262145, 0, 0, 262156, 0, 0, 327681, 0, 0, 327692, 0, 0, 327697, 0, 0, 327698, 0, 0, 393218, 0, 0, 393228, 0, 0, 393233, 0, 0, 458754, 0, 0, 458764, 0, 0, 458768, 0, 0, 458769, 0, 0, 524300, 0, 0, 524304, 0, 0, 589840, 0, 0, 655375, 0, 0, 720898, 0, 0, 720899, 0, 0, 720900, 0, 0, 720901, 0, 0, 720902, 0, 0, 786438, 0, 0, 851974, 0, 0, 851978, 0, 0, 851979, 0, 0, 851980, 0, 0, 851981, 0, 0, 851982, 0, 0, 851983, 0, 0, 917510, 0, 0, 917516, 0, 0, 917517, 0, 0, 983053, 0, 0, 983054, 0, 0, 983055, 0, 0, 983056, 0, 0 )
script = SubResource( 5 )

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 0.243137, 0.243137, 0.243137, 1 )

[node name="enemy" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 449.315, 369.421 )
scale = Vector2( 0.207549, 0.287858 )
texture = ExtResource( 4 )
script = ExtResource( 5 )

[node name="LabelDistancia" type="Label" parent="."]
margin_left = 397.0
margin_top = 9.0
margin_right = 664.0
margin_bottom = 30.0
rect_pivot_offset = Vector2( 43.714, 21 )
custom_colors/font_color = Color( 1, 0, 0, 1 )
custom_colors/font_outline_modulate = Color( 0, 0, 0, 1 )
text = "-1"
__meta__ = {
"_edit_use_anchors_": false
}
